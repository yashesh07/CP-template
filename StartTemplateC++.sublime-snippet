<snippet>
	<content><![CDATA[
/**********************

Author: Yashesh Bhavsar

**********************/

#include<bits/stdc++.h>
using namespace std;

typedef long long ll;

#define _ << " " <<
#define pushb push_back
#define popb pop_back
#define nl "\n"
#define yes "YES"
#define no "NO"
#define inf 1000000000
#define linf 1000000000000000000

#define all(x) x.begin(), x.end()
#define popcount(x) __builtin_popcount(x)
#define string_to_int(x)  stoi(x)
#define string_to_long(x)  stoll(x, nullptr, 10)

void solve();

ll max3(ll n1, ll n2, ll n3){return max(n1, max(n2, n3));}
ll min3(ll n1, ll n2, ll n3){return min(n1, min(n2, n3));}

ll pow(ll a, ll b, ll m) {a %= m;ll res = 1;while (b > 0) {if (b & 1)res = res * a % m;a = a * a % m;b >>= 1;}return res;}
ll pow(ll a, ll b) {ll res = 1;while (b > 0) {if (b & 1)res = res * a;a = a * a;b >>= 1;}return res;}
ll powPow(ll a, ll b, ll c, ll m){return pow(a, pow(b, c, m-1), m);}
ll gcd (ll a, ll b) {return b ? gcd (b, a % b) : a;}
ll lcm (ll a, ll b) {return a / gcd(a, b) * b;}
ll extendedEuclidean(ll a, ll b, ll& x, ll& y) {x = 1, y = 0;ll x1 = 0, y1 = 1, a1 = a, b1 = b;while (b1) {ll q = a1 / b1;tie(x, x1) = make_tuple(x1, x - q * x1);tie(y, y1) = make_tuple(y1, y - q * y1);tie(a1, b1) = make_tuple(b1, a1 - q * b1);}return a1;}
ll moduloInverse(ll a, ll m){ll x, y;ll g = extendedEuclidean(a, m, x, y);if(g!=1) return -1;x = (x%m+m)%m;return x;}
ll modAdd(ll x, ll y, ll m){return ((x%m)+(y%m))%m;}
ll modSub(ll x, ll y, ll m){return ((x%m)-(y%m)+m)%m;}
ll modMul(ll x, ll y, ll m){return ((x%m)*(y%m))%m;}
ll modDiv(ll x, ll y, ll m){return ((x%m)*(moduloInverse(y, m)%m))%m;}
ll geometricSum(ll a, ll r, ll n, ll m){return modDiv(modMul(a, modSub(pow(r, n, m), 1, m), m), r-1, m);}
vector<ll> factmod(ll n, ll m) {vector<ll> f(n+1, 0);f[0] = 1;for(ll i = 1; i<=n; i++){f[i] = modMul(f[i-1], i, m);}return f;}
ll nCr(ll n, ll r, ll m, vector<ll>& fact, vector<ll>& inv){return modMul(fact[n], modMul(inv[n-r], inv[r], m), m);}
ll nCr(ll n, ll r, ll m){vector<ll> fact = factmod(n, m);return modMul(fact[n], modMul(moduloInverse(fact[n-r], m), moduloInverse(fact[r], m), m), m);}
vector<ll> findFactors(ll n){vector<ll> factors;for(ll d = 1; d*d<=n; d++){if(n%d==0){factors.pushb(d);if(n/d!=d)  factors.pushb(n/d);}}return factors;}
vector<ll> primeFactorization(ll n){vector<ll> f;for(ll d = 2; d*d<=n; d++){while(n%d==0){f.pushb(d);n /= d;}}if(n>1)  f.pushb(n);return f;}
vector<bool> sieveOfEratosthenes(ll n){ vector<bool> isPrime(n+1, true); isPrime[0] = isPrime[1] = false; for(ll i = 2; i<=n; i++){ if(isPrime[i]){ for(ll j = i*i; j<=n; j+=i){ isPrime[j] = false; } } } return isPrime; }
ll phi(ll n) { ll result = n; for (ll i = 2; i * i <= n; i++) { if (n % i == 0) { while (n % i == 0) n /= i; result -= result / i; } } if (n > 1) result -= result / n; return result; }
bool ldeFindAnySolution(ll a, ll b, ll c, ll &x0, ll &y0, ll &g) { g = extendedEuclidean(abs(a), abs(b), x0, y0); if (c % g) { return false; } x0 *= c / g; y0 *= c / g; if (a < 0) x0 = -x0; if (b < 0) y0 = -y0; return true; }
void shift_solution(ll &x, ll &y, ll a, ll b, ll cnt) { x += cnt * b; y -= cnt * a; }
ll ldeFindAllSolutions(ll a, ll b, ll c, ll minx, ll maxx, ll miny, ll maxy) { ll x, y, g; if (!ldeFindAnySolution(a, b, c, x, y, g)) return 0; a /= g; b /= g; ll sign_a = a > 0 ? +1 : -1; ll sign_b = b > 0 ? +1 : -1; shift_solution(x, y, a, b, (minx - x) / b); if (x < minx) shift_solution(x, y, a, b, sign_b); if (x > maxx) return 0; ll lx1 = x; shift_solution(x, y, a, b, (maxx - x) / b); if (x > maxx) shift_solution(x, y, a, b, -sign_b); ll rx1 = x; shift_solution(x, y, a, b, -(miny - y) / a); if (y < miny) shift_solution(x, y, a, b, -sign_a); if (y > maxy) return 0; ll lx2 = x; shift_solution(x, y, a, b, -(maxy - y) / a); if (y > maxy) shift_solution(x, y, a, b, sign_a); ll rx2 = x; if (lx2 > rx2) swap(lx2, rx2); ll lx = max(lx1, lx2); ll rx = min(rx1, rx2); if (lx > rx) return 0; return (rx - lx) / abs(b) + 1; }
ll ldeFindMinXY(ll a, ll b, ll c) { ll x, y, g; if (!ldeFindAnySolution(a, b, c, x, y, g)) return -1; a /= g; b /= g; ll sign_a = a > 0 ? +1 : -1; ll sign_b = b > 0 ? +1 : -1; shift_solution(x, y, a, b, -x / b); if (x < 0) shift_solution(x, y, a, b, sign_b); ll minx1 = x; shift_solution(x, y, a, b, y / a); if (y < 0) shift_solution(x, y, a, b, -sign_a); ll minx2 = x; if (minx2 > x) swap(minx2, x); ll minx = max(minx1, minx2); if (minx > x) return -1; ll miny = (c - a * x) / b; return (miny + minx); }
vector<ll> uniquePrimeFactorization(ll n){vector<ll> f;unordered_set<ll> set;for(ll d = 2; d*d<=n; d++){if(n%d==0){set.insert(d);}while(n%d==0){n /= d;}}if(n>1)  set.insert(n);f.insert(f.end(), set.begin(), set.end());return f;}


int main(){
   ios_base::sync_with_stdio(false);cin.tie(NULL);
   
   #ifndef ONLINE_JUDGE
   freopen("input.txt", "r", stdin);
   freopen("error.txt", "w", stderr);
   freopen("output.txt", "w", stdout);
   #endif
   
   ll t=1;
   cin>>t;
   while(t--){
      solve();
      cout<<nl;
   }
   
   cerr<<"time taken : "<<(float)clock()/CLOCKS_PER_SEC<<" secs"<<nl;
   return 0;
}

void solve(){
   ${1:}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>init</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
