<snippet>
    <content><![CDATA[
struct Edge {
  ll u, v;
  ll cap, flow;
  Edge() {}
  Edge(ll u, ll v, ll cap): u(u), v(v), cap(cap), flow(0) {}
};

struct Dinic {
  ll N;
  vector<Edge> E;
  vector<vector<ll>> g;
  vector<ll> d, pt;
  
  Dinic(ll N): N(N), E(0), g(N), d(N), pt(N) {}

  void add_edge(ll u, ll v, ll cap) {
    if (u != v) {
      E.emplace_back(u, v, cap);
      g[u].emplace_back(E.size() - 1);
      E.emplace_back(v, u, 0);
      g[v].emplace_back(E.size() - 1);
    }
  }

  bool BFS(ll S, ll T) {
    queue<ll> q({S});
    fill(d.begin(), d.end(), N + 1);
    d[S] = 0;
    while(!q.empty()) {
      ll u = q.front(); q.pop();
      if (u == T) break;
      for (ll k: g[u]) {
        Edge &e = E[k];
        if (e.flow < e.cap && d[e.v] > d[e.u] + 1) {
          d[e.v] = d[e.u] + 1;
          q.emplace(e.v);
        }
      }
    }
    return d[T] != N + 1;
  }

  ll DFS(ll u, ll T, ll flow = -1) {
    if (u == T || flow == 0) return flow;
    for (ll &i = pt[u]; i < g[u].size(); ++i) {
      Edge &e = E[g[u][i]];
      Edge &oe = E[g[u][i]^1];
      if (d[e.v] == d[e.u] + 1) {
        ll amt = e.cap - e.flow;
        if (flow != -1 && amt > flow) amt = flow;
        if (ll pushed = DFS(e.v, T, amt)) {
          e.flow += pushed;
          oe.flow -= pushed;
          return pushed;
        }
      }
    }
    return 0;
  }

  ll max_flow(ll S, ll T) {
    ll total = 0;
    while (BFS(S, T)) {
      fill(pt.begin(), pt.end(), 0);
      while (ll flow = DFS(S, T))
        total += flow;
    }
    return total;
  }
};
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>dinic_maxflow</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>